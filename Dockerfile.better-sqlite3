# Dockerfile с better-sqlite3 (более надежная альтернатива)
# Многоэтапная сборка для приложения Матрица Эйзенхауэра

# Этап 1: Сборка фронтенда
FROM node:18-alpine AS frontend-builder

# Устанавливаем рабочую директорию
WORKDIR /app/frontend

# Копируем package.json и package-lock.json для кэширования зависимостей
COPY frontend/package*.json ./

# Устанавливаем все зависимости (включая dev для сборки)
RUN npm ci

# Копируем исходный код фронтенда
COPY frontend/ ./

# Собираем фронтенд
RUN npm run build

# Этап 2: Сборка бэкенда
FROM node:18-alpine AS backend-builder

# Устанавливаем системные зависимости для сборки нативных модулей
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    sqlite-dev \
    && rm -rf /var/cache/apk/*

# Устанавливаем рабочую директорию
WORKDIR /app/backend

# Создаем package.json с better-sqlite3
RUN echo '{ \
    "name": "eisenhower-matrix-backend", \
    "version": "1.0.0", \
    "description": "Backend for Eisenhower Matrix application", \
    "main": "server.js", \
    "scripts": { \
    "start": "node server.js", \
    "dev": "nodemon server.js", \
    "init-db": "node init-db.js" \
    }, \
    "dependencies": { \
    "express": "^4.18.2", \
    "better-sqlite3": "^9.2.2", \
    "cors": "^2.8.5", \
    "cookie-parser": "^1.4.6", \
    "uuid": "^9.0.1", \
    "csv-writer": "^1.6.0" \
    }, \
    "devDependencies": { \
    "nodemon": "^3.0.2" \
    } \
    }' > package.json

# Устанавливаем зависимости
RUN npm ci --only=production

# Копируем исходный код бэкенда
COPY backend/ ./

# Этап 3: Финальный образ
FROM node:18-alpine AS production

# Устанавливаем системные зависимости
RUN apk add --no-cache \
    sqlite \
    && rm -rf /var/cache/apk/*

# Создаем пользователя для безопасности
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем собранный фронтенд из первого этапа
COPY --from=frontend-builder /app/frontend/dist ./public

# Копируем бэкенд из второго этапа
COPY --from=backend-builder /app/backend ./

# Создаем директории для данных
RUN mkdir -p /app/data && \
    chown -R nodejs:nodejs /app

# Переключаемся на пользователя nodejs
USER nodejs

# Открываем порт
EXPOSE 3000

# Устанавливаем переменные окружения
ENV NODE_ENV=production
ENV PORT=3000
ENV DB_PATH=/app/data/database.sqlite

# Создаем volume для данных
VOLUME ["/app/data"]

# Команда запуска
CMD ["npm", "start"]

# Метаданные
LABEL maintainer="alex1c-spb@yandex.ru"
LABEL description="Eisenhower Matrix - Task Management Application"
LABEL version="1.0.0"
